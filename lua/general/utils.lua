Util = {}

--> Centering an array of strings
function Util.center(dict)
    local new_dict = {}
    for _, v in pairs(dict) do
		local padding = vim.fn.max(vim.fn.map(dict, 'strwidth(v:val)'))
		local spacing = (" "):rep(math.floor((vim.o.columns - padding) / 2)) .. v
		table.insert(new_dict, spacing)
	end
    return new_dict
end

--> Noice simple dashboard (prolly temporary)
function Util.noice_board()
	local header = {
		"","", "", "", "", "", "", "",
		[[ ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà     ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñì    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà   ]],
		[[ ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà    ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí   ‚ñì‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà     ‚ñì‚ñà   ‚ñÄ   ]],
		[[‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñí   ‚ñí‚ñì‚ñà    ‚ñÑ    ‚ñí‚ñà‚ñà‚ñà     ]],
		[[‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñë   ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí   ‚ñí‚ñì‚ñà  ‚ñÑ   ]],
		[[‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë   ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë   ‚ñë‚ñà‚ñà‚ñë   ‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë   ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí  ]],
		[[‚ñë ‚ñí‚ñë   ‚ñí ‚ñí    ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë    ‚ñë‚ñì     ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë  ]],
		[[‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë     ‚ñë ‚ñí ‚ñí‚ñë     ‚ñí ‚ñë     ‚ñë  ‚ñí       ‚ñë ‚ñë  ‚ñë  ]],
		[[   ‚ñë   ‚ñë ‚ñë    ‚ñë ‚ñë ‚ñë ‚ñí      ‚ñí ‚ñë   ‚ñë              ‚ñë     ]],
		[[         ‚ñë        ‚ñë ‚ñë      ‚ñë     ‚ñë ‚ñë            ‚ñë  ‚ñë  ]],
		[[                                 ‚ñë                    ]]
	}
    if vim.api.nvim_buf_get_name(0) == "" then
		vim.api.nvim_buf_set_option(0, 'bufhidden', 'wipe')

		vim.schedule(function()
			vim.fn.matchadd("Error", '[‚ñë‚ñí]')
			vim.fn.matchadd("Function", '[‚ñì‚ñà‚ñÑ‚ñÄ‚ñê‚ñå]')
			local buf = vim.api.nvim_create_buf(false, true)
			local keys = { K='~/.config/kitty/kitty.conf', F='~/.config/fish/config.fish', I='~/.config/nvim/init.lua', A='~/.config/alacritty/alacritty.yml', P='~/.config/picom/picom.conf' }
			local opts = {noremap = true, silent = true}

			vim.api.nvim_win_set_buf(0, buf)
			vim.api.nvim_put(Util.center(header), "l", true, true)
			vim.cmd [[silent! setlocal nonu nornu autochdir ft=dashboard]]

			for k,f in pairs(keys) do
				vim.api.nvim_buf_set_keymap(0,'n',k,':e '..f..' | setlocal noautochdir<CR>',opts)
			end
			vim.api.nvim_buf_set_keymap(0, 'n', 'q', '<cmd>q<CR>', opts)
		end)
    end
end

--> Closing Windows and buffers
Util.close_command = function()
	local total = 0
	for _, buf in ipairs(vim.api.nvim_list_bufs()) do
		if vim.api.nvim_buf_is_loaded(buf) and vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_get_name(buf) ~= "" then
			total = total + 1
		end
	end

	vim.cmd(total == 1 and ":q" or ":bd")
end


--> Different Kinds of Borders
local borders = {
	{ "‚ïí", "‚ïê", "‚ïï", "‚îÇ", "‚ïõ", "‚ïê", "‚ïò", "‚îÇ" },
	{ "ü≠Ω", "‚ñî", "ü≠æ", "‚ñï", "ü≠ø", "‚ñÅ", "ü≠º", "‚ñè" },
	{ "‚ï≠", "‚îÄ", "‚ïÆ", "‚îÇ", "‚ïØ", "‚îÄ", "‚ï∞", "‚îÇ" },
}
Util.border = borders[1]

--> Custom telescope theme
Util.telescope_theme = {
	results_title = false,
	layout_strategy = "center",
	previewer = false,
	winblend = 30,
	layout_config = { width = 0.6, height = 0.6 },
	borderchars = {
		preview = { "‚îÄ", "‚îÇ", "‚îÄ", "‚îÇ", "‚ï≠", "‚ïÆ", "‚ïØ", "‚ï∞" },
		prompt = { "‚îÄ", "‚îÇ", "‚îÄ", "‚îÇ", "‚ï≠", "‚ïÆ", "‚ïØ", "‚ï∞" },
		results = { "‚îÄ", " ", " ", " ", "‚ï∞", "‚ïØ", " ", " " },
	},
}

return Util
