local Util = {}

Util.mess = function()
    local contents = vim.api.nvim_exec("mess", true)
    if contents == "" then return end
    vim.cmd("vnew | setl bt=nofile bh=wipe nonu nornu")

    vim.api.nvim_put(vim.split(contents, '\n'), "", true, true)
end

--> Using `K` for docs related popups
Util.docs = function()
    if vim.api.nvim_buf_get_name(0):match("Cargo.toml$") then
        require("crates").show_popup()
    else
        vim.lsp.buf.hover()
    end
end

--> Centering an array of strings
Util.center = function(dict)
    local new_dict = {}
    for _, v in pairs(dict) do
        local padding = vim.fn.max(vim.fn.map(dict, 'strwidth(v:val)'))
        local spacing = (" "):rep(math.floor((vim.o.columns - padding) / 2)) .. v
        table.insert(new_dict, spacing)
    end
    return new_dict
end

--> Simple dashboard
Util.splash_screen = function()
    local xdg = vim.fn.fnamemodify(vim.fn.stdpath("config"), ":h").."/"
    local header = {
        "","", "", "", "", "",
        [[ ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà     ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñì    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà   ]],
        [[ ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà    ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí   ‚ñì‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà     ‚ñì‚ñà   ‚ñÄ   ]],
        [[‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñí   ‚ñí‚ñì‚ñà    ‚ñÑ    ‚ñí‚ñà‚ñà‚ñà     ]],
        [[‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñë   ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí   ‚ñí‚ñì‚ñà  ‚ñÑ   ]],
        [[‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë   ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë   ‚ñë‚ñà‚ñà‚ñë   ‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë   ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí  ]],
        [[‚ñë ‚ñí‚ñë   ‚ñí ‚ñí    ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë    ‚ñë‚ñì     ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë  ]],
        [[‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë     ‚ñë ‚ñí ‚ñí‚ñë     ‚ñí ‚ñë     ‚ñë  ‚ñí       ‚ñë ‚ñë  ‚ñë  ]],
        [[   ‚ñë   ‚ñë ‚ñë    ‚ñë ‚ñë ‚ñë ‚ñí      ‚ñí ‚ñë   ‚ñë              ‚ñë     ]],
        [[         ‚ñë        ‚ñë ‚ñë      ‚ñë     ‚ñë ‚ñë            ‚ñë  ‚ñë  ]],
        [[                                 ‚ñë                    ]]
    }
    if vim.api.nvim_buf_get_name(0) == "" then
        vim.api.nvim_buf_set_option(0, 'bufhidden', 'wipe')

        vim.schedule(function()
            vim.fn.matchadd("Error", '[‚ñë‚ñí]')
            vim.fn.matchadd("Function", '[‚ñì‚ñà‚ñÑ‚ñÄ‚ñê‚ñå]')
            local buf = vim.api.nvim_create_buf(false, true)
            local map = function(lhs, rhs) vim.keymap.set('n', lhs, rhs, {silent=true, buffer=0}) end
            local keys = {K='kitty/kitty.conf', W='wezterm/wezterm.lua', I='nvim/init.lua', A='alacritty/alacritty.yml'}
            vim.api.nvim_win_set_buf(0, buf)
            vim.api.nvim_put(Util.center(header), "l", true, true)
            vim.cmd [[silent! setl nonu nornu acd ft=dashboard]]

            for k,f in pairs(keys) do map(k,'<cmd>e '..xdg..f..' | setl noacd<CR>') end
            map('P', '<cmd>Telescope oldfiles<CR>')
            map('q', '<cmd>q<CR>')
            map('o', '<cmd>e #<1<CR>')
        end)
    end
end

-- TODO: needs to be fixed.
--> Closing Windows and buffers
Util.close_command = function()
    for _, w in ipairs(vim.api.nvim_list_wins()) do
        if vim.api.nvim_win_get_config(w)['relative'] ~= "" then
            vim.api.nvim_win_close(w, {force=true})
            return
        end
    end

    if vim.bo.modified then print("buf not saved!") return end
    local total = #vim.tbl_filter(function(buf)
        return vim.api.nvim_buf_is_loaded(buf) and vim.api.nvim_buf_get_name(buf) ~= ""
    end, vim.api.nvim_list_bufs())

    -- TODO: buggy.
    local quit_cmd = #vim.api.nvim_list_wins() > 1 and 'Q' or 'q'
    vim.cmd(total == 1 and quit_cmd or 'bd')
end

--> Different Kinds of Borders
local borders = {
    { "‚ïí", "‚ïê", "‚ïï", "‚îÇ", "‚ïõ", "‚ïê", "‚ïò", "‚îÇ" },
    { "ü≠Ω", "‚ñî", "ü≠æ", "‚ñï", "ü≠ø", "‚ñÅ", "ü≠º", "‚ñè" }
}
Util.border = borders[1]

--> Custom telescope theme
Util.telescope_theme = {
    results_title = false,
    layout_strategy = "center",
    sorting_strategy = "ascending",
    previewer = false,
    prompt_prefix = "   Ôë´   ",
    winblend = 15,
    layout_config = { width = 0.6, height = 0.6 },
    borderchars = {
        preview = { "‚îÄ", "‚îÇ", "‚îÄ", "‚îÇ", "‚ï≠", "‚ïÆ", "‚ïØ", "‚ï∞" },
        prompt = { "‚îÄ", "‚îÇ", "‚îÄ", "‚îÇ", "‚ï≠", "‚ïÆ", "‚ïØ", "‚ï∞" },
        results = { "‚îÄ", " ", " ", " ", "‚ï∞", "‚ïØ", " ", " " },
    },
}

--> Toggling quickfix window with a keybind
Util.toggle_quickfix = function()
    vim.cmd(
        #vim.tbl_filter(function(w)
            return vim.bo[vim.api.nvim_win_get_buf(w)].ft == "qf"
        end, vim.api.nvim_list_wins()) > 0
    and "cclose" or "copen")
end

return Util
